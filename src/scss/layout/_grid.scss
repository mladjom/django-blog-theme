@use "../abstracts/mixins";
@use "../abstracts/variables";


// Grid Container
.grid-container {
  display: grid;
  grid-template-columns: repeat(variables.$grid-columns, 1fr);
  gap: variables.$grid-gutter;
  width: 100%;
  max-width: 1200px; // Optional for centered layouts
  margin: 0 auto; // Center container
  //padding: 0 variables.$grid-row-gutter; // Optional inner padding
}

// Row Class
.grid-row {
  display: contents; // Allows rows to group without creating new block contexts
}

// Grid Items 
.grid-item {
  grid-column: span 12; // Default to 12 column span
}

// Generate column utilities
@for $i from 1 through variables.$grid-columns {
  .col-#{$i} {
    grid-column: span $i;
  }
  
  @each $breakpoint, $value in variables.$grid-breakpoints {
    .col-#{$breakpoint}-#{$i} {
      @include mixins.respond-to($breakpoint) {
        grid-column: span $i;
      }
    }
  }
}

// Generate Gap Utilities
@each $size in variables.$gap-sizes {
  // Base gap classes
  .gap-x-#{$size} {
    column-gap: $size * variables.$grid-gutter-base;
  }

  .gap-y-#{$size} {
    row-gap: $size * variables.$grid-gutter-base;
  }

  .gap-#{$size} {
    gap: $size * variables.$grid-gutter-base;
  }

  // Responsive gap classes
  @each $breakpoint, $min-width in variables.$grid-breakpoints {
    .gap-#{$breakpoint}-#{$size} {
      @include mixins.respond-to($breakpoint) {
        gap: $size * variables.$grid-gutter-base;
      }
    }

    .gap-x-#{$breakpoint}-#{$size} {
      @include mixins.respond-to($breakpoint) {
        column-gap: $size * variables.$grid-gutter-base;
      }
    }

    .gap-y-#{$breakpoint}-#{$size} {
      @include mixins.respond-to($breakpoint) {
        row-gap: $size * variables.$grid-gutter-base;
      }
    }
  }
}
