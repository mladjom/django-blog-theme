@use "../abstracts/mixins";
@use "../abstracts/variables";


// Grid Container
.grid-container {
  display: grid;
  grid-template-columns: repeat(variables.$grid-columns, 1fr);
  gap: variables.$grid-gutter;
  width: 100%;
  max-width: 1200px; // Optional for centered layouts
  margin: 0 auto; // Center container
  padding: 0 variables.$grid-gutter; // Optional inner padding
}


// Grid Items
.grid-item {
  grid-column: span 1; // Default to 1 column span
}

// Responsive Column Spans
@mixin grid-span($columns) {
  grid-column: span $columns;
}

// Responsive Grid Layouts
@mixin grid-responsive($breakpoint, $columns) {
  @include mixins.respond-to($breakpoint) {
    grid-column: span $columns;
  }
}

// Example Classes for Column Spans
@for $i from 1 through variables.$grid-columns {
  .col-#{$i} {
    grid-column: span $i;
  }

  @each $breakpoint, $value in variables.$grid-breakpoints {
    .col-#{$i}-#{$breakpoint} {
      @include mixins.respond-to($breakpoint) {
        grid-column: span $i;
      }
    }
  }
}

// Alignment Utilities
.grid-align-center {
    align-items: center;
  }
  .grid-justify-center {
    justify-items: center;
  }
  .grid-justify-start {
    justify-items: start;
  }
  .grid-justify-end {
    justify-items: end;
  }
  .grid-justify-space-between {
    justify-content: space-between;
  }