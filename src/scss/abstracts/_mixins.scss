@use "../abstracts/variables" as vars;
@use "../abstracts/functions" as func;
@use 'sass:map';
@use "sass:math";
@use "sass:color";

/*------------------------------------*\
    #MIXINS
\*------------------------------------*/

// Modern mixin for media queries
@mixin breakpoint($size) {
  @if map.has-key(vars.$breakpoints, $size) {
    @media screen and (min-width: map.get(vars.$breakpoints, $size)) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$size}";
  }
}

// Stack (vertical spacing)
@mixin stack($space: $space-md) {
  display: flex;
  flex-direction: column;
  gap: $space;
}

// Modified responsive-stack mixin that accepts a spacing configuration
@mixin responsive-stack($default-space: $space-md, $responsive-spaces: ()) {
  display: flex;
  flex-direction: column;
  gap: $default-space; // Base spacing for mobile

  @each $breakpoint, $space in $responsive-spaces {
    @if map.has-key(vars.$breakpoints, $breakpoint) {
      @include breakpoint($breakpoint) {
        gap: $space;
      }
    }
  }
}

// Cluster (horizontal spacing)
@mixin cluster($space: $space-sm) {
  display: flex;
  flex-wrap: wrap;
  gap: $space;
}

// Space children
@mixin space-children($space: $space-md, $direction: 'vertical') {
  > * + * {
    @if $direction == 'vertical' {
      margin-top: $space;
    } @else {
      margin-left: $space;
    }
  }
}

// Section padding
@mixin section-padding($size: 'sm') {
  @if $size == 'md' {
    padding: vars.$section-spacing-md 0;
  } @else if $size == 'lg' {
    padding: vars.$section-spacing-lg 0;
  } @else {
    padding: vars.$section-spacing-sm 0;
  }
}

// Responsive section padding
@mixin responsive-section-padding($size: 'sm') {
  padding: vars.$section-spacing-sm 0; // Default padding for small size

  @include breakpoint(md) {
    @if $size == 'md' {
      padding: vars.$section-spacing-md 0;
    }
  }

  @include breakpoint(lg) {
    @if $size == 'lg' {
      padding: vars.$section-spacing-lg 0;
    }
  }
}


@mixin fluid-type($max-size) {
  $scale-factor: 1.25; // Major third scale factor
  $min-size: math.div($max-size, $scale-factor); // Scale down the max size by the factor
  font-size: clamp(#{$min-size}, 5vw, #{$max-size});
}


// Heading styles
@mixin heading-base {
  font-family: vars.$font-family-heading;
  font-weight: vars.$font-weight-bold;
  line-height: vars.$line-height-tight;
  letter-spacing: vars.$letter-spacing-tight;
  margin-top: 1.5em;
  margin-bottom: 0.5em;
}

// Flex Center
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

// Clearfix
@mixin clearfix { 
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// Text Truncate
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Transition
@mixin transition($property, $duration, $timing: ease) {
  transition: $property $duration $timing;
}

// Box Shadow
@mixin box-shadow($x, $y, $blur, $color) {
  box-shadow: $x $y $blur $color;
}

@mixin generate-color-variants($color, $prefix) {
  // Base color
  --#{$prefix}: #{$color};
  
  // Just a few opacity variants for overlays and subtle backgrounds
  --#{$prefix}-10: #{rgba($color, 0.1)};
  --#{$prefix}-20: #{rgba($color, 0.2)};
  --#{$prefix}-30: #{rgba($color, 0.3)};
  
  // One lighter and one darker variant for hover states and emphasis
  --#{$prefix}-lighter: #{color.scale($color, $lightness: 20%)};
  --#{$prefix}-darker: #{color.scale($color, $lightness: -10%)};
}